package edu.ust.cisc;

import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

public abstract class CiscAbstractSet<E> implements CiscSet<E> {
    /**
     * Stores the number of elements in this set
     */
    protected int size;

    /**
     * Returns the number of elements in this set.
     *
     * @return the number of elements in this set
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * Returns {@code true} if this set contains no elements.
     *
     * @return {@code true} if this set contains no elements
     */
    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns {@code true} if this set contains the specified element (compared using the {@code equals} method).
     *
     * @param o element whose presence in this set is to be tested
     * @return {@code true} if this set contains the specified element
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public boolean contains(Object o) {
        if (o == null) {
            throw new NullPointerException();
        }

            for (E element : this) {
                if (element.equals(o))
                    return true;
            }
            return false;
        }



    /**
     * Returns an iterator over the elements in this set in the proper sequence (if any).
     *
     * @return an iterator over the elements in this set in the proper sequence (if any)
     */
    @Override
    public abstract Iterator<E> iterator();

    /**
     * Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order
     * its elements are returned by its iterator, this method must return the elements in the same order. The returned
     * array's {@linkplain Class#getComponentType runtime component type} is {@code Object}.
     *
     * <p>The returned array will be "safe" in that no references to it are maintained by this set.  (In other words,
     * this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify
     * the returned array.
     *
     * @return an array, whose {@linkplain Class#getComponentType runtime component type} is {@code Object}, containing
     * all of the elements in this set
     */
    @Override
    public Object[] toArray() {
       Object [] array = new Object[size];
       Iterator<E> iterator = iterator();

       int index = 0;

       while (iterator.hasNext()) {
           array[index++] = iterator.next();
       }
       return array;
    }

    /**
     * Removes all of the elements from this set. The set will be empty after this call returns.
     */
    @Override
    public abstract void clear ();

    /**
     * Adds the specified element to the set.
     *
     * @param e element to be added to this set
     * @return {@code true} if the element was added to this set, or {@code false} if the element was already present
     * @throws NullPointerException if the specified element is null
     *
     *
     *
     *
     */
    @Override
    public abstract boolean add (E e);

    /**
     * Removes the specified element from this set, if it is present.  If this set does not contain the element, the set
     * is unchanged. Returns {@code true} if this set contained the specified element, {@code false} otherwise.
     *
     * @param o element to be removed from this set, if present
     * @return {@code true} if this set contained the specified element, {@code false} otherwise
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public abstract boolean remove(Object o) ;
    /**
     * Returns a string representation of this set.  This string should consist of a comma separated list of
     * values contained in this set, in the same order provided by the set's iterator.
     *
     * @return a string representation of this set
     *
     */
    @Override
    public String toString() {
        return Arrays.toString(toArray()); //toString and override in CISCTREESET not in hash
    }
}

