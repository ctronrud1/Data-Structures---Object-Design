package edu.ust.cisc;

import java.util.*;

public class CiscStack<E> implements CiscCollection<E> {

    /**
     * A reference to the node containing the element at the top of the stack (or null if stack is empty).
     */
    private Node<E> top;
    /**
     * Number of elements in the stack.
     */
    private int size;

    /**
     * Inserts the specified item at the top of the stack.
     * Video: https://youtu.be/WR3zrXwUP3w
     *
     * @param item element being added to the stack
     * @throws NullPointerException if the item is null
     */
    public void push(E item) {
        if (item == null) {
            throw new NullPointerException();
        }

        Node <E> newNode = new Node <> (item,top);
        top = newNode;
        size ++;

    }

    /**
     * Returns and removes the element at the top of the stack.  After this method finishes, {@code top} should refer to
     * the node containing the most recently added element (or null if no more elements remain in the stack).
     * Video: https://youtu.be/labj3cpYnIU
     *
     * @return the element at the top of the stack
     * @throws EmptyStackException if the stack is empty
     */
    public E pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        E data = top.data;
        top = top.next;
        size--;
        return data;
    }

    /**
     * Returns the element at the top of the stack.
     * Video: https://youtu.be/wOM7Feh1EoQ
     *
     * @return the element at the top of the stack
     * @throws EmptyStackException if the stack is empty
     */
    public E peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return top.data;
    }

    /**
     * Returns the number of elements in this stack.
     * Video: https://youtu.be/Zggfk1gXgXo
     *
     * @return the number of elements in this stack
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * Returns {@code true} if this stack contains no elements.
     * Video: https://youtu.be/TDOAToCKXUk
     *
     * @return {@code true} if this stack contains no elements
     */
    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns {@code true} if this stack contains the specified element (compared using the {@code equals}
     * method).
     * Video: https://youtu.be/PZtG1kDKSYs
     *
     * @param o element whose presence in this stack is to be tested
     * @return {@code true} if this stack contains the specified element
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public boolean contains(Object o) {
        if (o == null) {
            throw new NullPointerException();
        }
        Node <E> current = top;
        while (current != null) {
            if (Objects.equals(current.data, o)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    /**
     * Inserts the specified item at the top of the stack. See the {@code push} operation.
     * Video: https://youtu.be/WR3zrXwUP3w
     *
     * @param e element being added to the stack
     * @return {@code true}
     * @throws NullPointerException if the item is null
     */
    @Override
    public boolean add(E e) {
        if (e == null) {
            throw new NullPointerException();
        }
        push(e);
        return true;
    }

    /**
     * This operation is not supported by CiscStack.
     * Video: https://youtu.be/I_Xc-HiFSUY
     *
     * @param o element to be removed from this collection, if present
     * @return {@code true} if this collection contained the specified element
     * @throws UnsupportedOperationException if the {@code remove} operation is not supported by this collection
     */
    @Override
    public boolean remove(Object o) {
            throw new UnsupportedOperationException();
        }

    /**
     * Adds all elements in the specified collection to this stack, in the order that they are returned by the
     * specified collection's iterator.
     * Video: https://youtu.be/edWMooZpjuE
     *
     * @param c collection containing elements to be added to this stack
     * @return {@code true} if this stack changed as a result of the call
     * @throws NullPointerException          if the specified collection is null
     */
    @Override
    public boolean addAll(CiscCollection<? extends E> c) {
        if (c == null) {
            throw new NullPointerException();
        }
        boolean modified = false;
        for (E element : c) {
            if (add(element)) {
                modified = true;
            }
        }
        return modified;
    }

    /**
     * Returns an iterator over the elements in this stack from top to bottom.
     * Video: https://youtu.be/ch4O1E5clbc
     *
     * @return an iterator over the elements in this stack from top to bottom
     */
    @Override
    public Iterator<E> iterator() {
        return new CiscStackIterator<>(top);
    }

    /**
     * Returns an array containing all of the elements in this stack in proper sequence (from top to bottom).
     * Video: https://youtu.be/Bz5LZBoN1-o
     *
     * <p>The returned array will be "safe" in that no references to it are maintained by this stack.  The caller is
     * thus free to modify the returned array.
     *
     * @return an array containing all of the elements in this stack in proper sequence
     */
    @Override
    public Object[] toArray() {
        Object [] arr = new Object[size];
        Node <E> current = top;
        int index = 0;
        while (current != null) {
            arr[index] = current.data;
            current = current.next;
            index++;
        }
        return arr;
    }

    /**
     * Removes all of the elements from this stack. The stack will be empty after this call returns.
     * Video: https://youtu.be/PH4nqc7zX4k
     */
    @Override
    public void clear() {
        top = null;
        size = 0;
    }

    /**
     * Returns a string representation of this stack.  This string should consist of a comma separated list of
     * values contained in this stack, from top to bottom, surrounded by square brackets (examples: [3, 6, 7] and []).
     * Video: https://youtu.be/lpgPH6W9uMA
     *
     * @return a string representation of this stack
     */
    public String toString() {
        StringBuilder sb = new StringBuilder("[");
        Node<E> current = top;
        while (current != null) {
            sb.append(current.data);
            if (current.next != null) {
                sb.append(", ");
            }
            current = current.next;
        }
        sb.append("]");
        return sb.toString();
    }

    private static class Node<E> {
        private E data;
        private Node<E> next;

        private Node(E data, Node<E> next) {
            this.data = data;
            this.next = next;
        }
    }

    private static class CiscStackIterator<E> implements Iterator<E> {
        /**
         * A reference to the node containing the next element to return.
         */
        private Node<E> nextNode;

        /**
         * Constructs an iterator beginning at the specified node.
         */
        private CiscStackIterator(Node<E> top) {
            nextNode = top;
        }

        /**
         * Returns {@code true} if the iteration has more elements. (In other words, returns {@code true} if
         * {@link #next} would return an element rather than throwing an exception.)
         *
         * @return {@code true} if the iteration has more elements
         */
        @Override
        public boolean hasNext() {

            return nextNode != null;
        }

        /**
         * Returns the next element in the iteration.
         *
         * @return the next element in the iteration
         * @throws NoSuchElementException if the iteration has no more elements
         */
        @Override
        public E next() {
            if(!hasNext()){
                throw new NoSuchElementException();
            }
            E data = nextNode.data;
            nextNode = nextNode.next;
            return data;
        }
    }
}

