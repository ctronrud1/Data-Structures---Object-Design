package edu.ust.cisc;

import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class CiscArrayList<E> implements CiscList<E> {

    /**
     * Default initial capacity of elementData.
     */
    private static final int DEFAULT_CAPACITY = 10;

    /**vc
     * The array into which the elements of the CiscArrayList are stored.
     */
    private E[] elementData;

    /**
     * The size of the CiscArrayList (the number of elements it contains).
     */
    private int size;

    /**
     * Constructs an empty list with an initial capacity of DEFAULT_CAPACITY.
     */
    public CiscArrayList() {
        this(DEFAULT_CAPACITY);
    }

    /**
     * Constructs an empty list with the specified initial capacity.
     *
     * @param  initialCapacity  the initial capacity of the list
     * @throws IllegalArgumentException if the specified initial capacity is negative
     */
    public CiscArrayList(int initialCapacity) {
        if (initialCapacity < 0) {
            throw new IllegalArgumentException();
        }
        elementData = (E[]) new Object [initialCapacity];
        size = 0;
    }

    /**
     * Returns the number of elements in this list.
     * Video: https://youtu.be/BULwr13VTfo
     *
     * @return the number of elements in this list
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * Returns {@code true} if this list contains no elements.
     * Video: https://youtu.be/6iBl6ayQ8Tg
     *
     * @return {@code true} if this list contains no elements
     */
    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns {@code true} if this list contains the specified element (compared using the {@code equals} method).
     * Video: https://youtu.be/j76BVoXKWRI
     *
     * @param o element whose presence in this list is to be tested
     * @return {@code true} if this list contains the specified element
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public boolean contains(Object o) {
        if(o == null) {
            throw new NullPointerException();
        }
        for (int i = 0; i < size; i++) {
            if (elementData[i].equals(o)){
                return true;
            }
        }
        return false;
    }

    /**
     * Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not
     * contain the element (compared using the {@code equals} method).
     * Video: https://youtu.be/1rkSbRmLLPA
     *
     * @param o element to search for
     * @return the index of the first occurrence of the specified element in this list, or -1 if this list does not
     * contain the element
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public int indexOf(Object o) {
        if (o == null) {
            throw new NullPointerException();
        }
        for (int i = 0; i < size; i++) {
            if (o.equals(elementData[i])){
                return i;
            }
        }
        return -1;
    }

    /**
     * Removes all of the elements from this list. The list will be empty after this call returns.
     * Video: https://youtu.be/qRCy1eYKSgg
     */
    @Override
    public void clear() {
        for (int i = 0; i < size; i++){
            elementData[i] = null;
        }
        size = 0;
    }

    /**
     * Returns the element at the specified position in this list.
     * Video: https://youtu.be/OW_GeYlecAo
     *
     * @param index index of the element to return
     * @return the element at the specified position in this list
     * @throws IndexOutOfBoundsException if the index is out of range
     */
    @Override
    public E get(int index) {
        if (index < 0 || index>= size) {
            throw new IndexOutOfBoundsException("Index out of bounds: " + index);
        }
        return elementData[index];
    }

    /**
     * Appends the specified element  to the end of this list.
     * Video: https://youtu.be/C9gUHGhtrkQ
     *
     * <p>Lists may place the specified element at arbitrary locations if desired.  In particular, an ordered list will
     * insert the specified element at its sorted location.  List classes should clearly specify in their documentation
     * how elements will be added to the list if different from the default behavior (end of this list).
     *
     * @param e element to be appended to this list
     * @return {@code true}
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public boolean add(E e) {
        if (e == null) {
            throw new NullPointerException("Specified element is null");
        }
        ensureCapacity(size + 1);
        elementData[size++] = e;
        return true;
    }

    /**
     * Replaces the element at the specified position in this list with the specified element.
     * Video: https://youtu.be/sw2NpbTPzvE
     *
     * @param index   index of the element to replace
     * @param element element to be stored at the specified position
     * @return the element previously at the specified position
     * @throws NullPointerException          if the specified element is null
     * @throws IndexOutOfBoundsException     if the index is out of range
     */
    @Override
    public E set(int index, E element) {
        if (element == null) {
            throw new NullPointerException("Specified amount is null");
        }
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index out of bounds: " + index);
        }
        E oldValue = elementData[index];
        elementData[index] = element;
        return oldValue;
    }

    /**
     * Returns an array containing all of the elements in this list in proper sequence (from first to last element).
     * Video: https://youtu.be/XmRzQJWdc40
     *
     * <p>The returned array will be "safe" in that no references to it are maintained by this list.  (In other words,
     * this method must allocate a new array even if this list is backed by an array). The caller is thus free to modify
     * the returned array.
     *
     * @return an array containing all of the elements in this list in proper sequence
     */
    @Override
    public Object[] toArray() {
        Object [] newArray = new Object[size];
        for (int i = 0; i < size; i++) {
            newArray[i] = elementData[i];
        }
        return newArray;
    }

    /**
     * Removes the first occurrence of the specified element from this list, if it is present.  If this list does not
     * contain the element, it is unchanged. Returns {@code true} if this list contained the specified element.
     * Video: https://youtu.be/REExeuHFToI
     *
     * @param o element to be removed from this list, if present
     * @return {@code true} if this list contained the specified element
     * @throws NullPointerException if the specified element is null
     */
    @Override
    public boolean remove(Object o) {
        if (o == null) {
            throw new NullPointerException("Specified element is null: ");
        }
        for (int i = 0; i < size; i++) {
            if (o.equals(elementData[i])) {
                remove(i);
                return true;
            }

        }
        return false;
    }

    /**
     * Removes the element at the specified position in this list.  Shifts any subsequent elements to the left
     * (subtracts one from their indices).  Returns the element that was removed from the list.
     * Video: https://youtu.be/vIiVAydLNXI
     *
     * @param index the index of the element to be removed
     * @return the element previously at the specified position
     * @throws IndexOutOfBoundsException if the index is out of range
     */
    @Override
    public E remove(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index out of bounds: " + index);
        }
        E oldValue = elementData[index];
        int numMoved = size - index - 1;
        if (numMoved > 0) {
            System.arraycopy(elementData, index + 1, elementData, index, numMoved);
        }
        elementData[--size] = null;
        return oldValue;
    }

    /**
     * Inserts the specified element at the specified position in this list.  Shifts the element
     * currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
     * Video: https://youtu.be/C1PTT1xShKk
     *
     * @param index   index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws NullPointerException          if the specified element is null
     * @throws IndexOutOfBoundsException     if the index is out of range
     */
    @Override
    public void add(int index, E element) {
        if (element == null){
            throw new NullPointerException("Specified amount is null: ");
        }
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index out of bounds: " + index);
        }
        ensureCapacity(size + 1);
        System.arraycopy(elementData, index, elementData, index + 1, size - index);
        elementData[index] = element;
        size++;
    }

    /**
     * Appends all elements in the specified list to the end of this list, in the order that they are returned by the
     * specified list's iterator.
     * Video: https://youtu.be/Xl5D_qYrmsE
     *
     * @param c list containing elements to be added to this list
     * @return {@code true} if this list changed as a result of the call
     * @throws NullPointerException          if the specified list is null
     */
    @Override
    public boolean addAll(CiscList<? extends E> c) {
        if (c == null){
            throw new NullPointerException("Specified list is null");
        }
        int numElements = c.size();
        ensureCapacity(size + numElements);
        for (E element : c) {
            elementData[size++] = element;
        }
    return numElements != 0;
    }

    /**
     * Returns an iterator over the elements in this list in proper sequence.
     * Video: Video: https://youtu.be/0wkDnsM3dZ0
     *
     * @return an iterator over the elements in this list in proper sequence
     */
    @Override
    public Iterator<E> iterator() {
        return new CiscArrayListIterator();
    }

    /**
     * Ensures that the capacity of the underlying array is at least {@code minCapacity}. If not, the underlying array
     * will be replaced with a new array whose capacity is either {@code minCapacity} or double the current capacity + 1
     * (whichever is larger).
     * Video: https://youtu.be/FunlEIk1FKA
     *
     * @param minCapacity minimum capacity of the underlying array
     */

    private void ensureCapacity(int minCapacity) {
        if (minCapacity > elementData.length) {
            int newCapacity = Math.max(minCapacity, elementData.length * 2 + 1);
            elementData = Arrays.copyOf(elementData, newCapacity);
        }

    }

    private class CiscArrayListIterator implements Iterator<E> {

        /**
         * Stores the index of the next element to be returned.
         */
        private int nextIndex;

        /**
         * Returns {@code true} if the iteration has more elements. (In other words, returns {@code true} if
         * {@link #next} would return an element rather than throwing an exception.)
         *
         * @return {@code true} if the iteration has more elements
         */
        @Override
        public boolean hasNext() {
            return nextIndex < size;
        }

        /**
         * Returns the next element in the iteration.
         *
         * @return the next element in the iteration
         * @throws NoSuchElementException if the iteration has no more elements
         */
        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            return elementData[nextIndex++];
        }
    }
}
