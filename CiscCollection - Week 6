package edu.ust.cisc;

import java.util.Iterator;

public interface CiscCollection<E> extends Iterable<E> {

    /**
     * Returns the number of elements in this collection.
     *
     * @return the number of elements in this collection
     */
    int size();

    /**
     * Returns {@code true} if this collection contains no elements.
     *
     * @return {@code true} if this collection contains no elements
     */
    boolean isEmpty();

    /**
     * Removes all of the elements from this collection. The collection will be empty after this call returns.
     */
    void clear();

    /**
     * Returns {@code true} if this collection contains the specified element (compared using the {@code equals}
     * method).
     *
     * @param o element whose presence in this collection is to be tested
     * @return {@code true} if this collection contains the specified element
     * @throws NullPointerException if the specified element is null
     */
    boolean contains(Object o);

    /**
     * Adds the specified element to this collection.
     *
     * <p>Collections may place the specified element at arbitrary locations if desired.  Collection classes should
     * clearly specify in their documentation how elements will be added to the collection.
     *
     * @param e element to be added to this collection
     * @return {@code true}
     * @throws NullPointerException if the specified element is null
     */
    boolean add(E e);

    /**
     * Removes the first occurrence of the specified element from this collection, if it is present.  If this collection
     * does not contain the element, it is unchanged. Returns {@code true} if this collection contained the specified
     * element (optional operation).
     *
     * @param o element to be removed from this collection, if present
     * @return {@code true} if this collection contained the specified element
     * @throws NullPointerException if the specified element is null
     * @throws UnsupportedOperationException if the {@code remove} operation is not supported by this collection
     */
    boolean remove(Object o);

    /**
     * Adds all elements in the specified collection to this collection, in the order that they are returned by the
     * specified collection's iterator (optional operation).
     *
     * @param c collection containing elements to be added to this collection
     * @return {@code true} if this collection changed as a result of the call
     * @throws UnsupportedOperationException if the {@code addAll} operation is not supported by this collection
     * @throws NullPointerException if the specified collection is null
     */
    boolean addAll(CiscCollection<? extends E> c);

    /**
     * Returns an array containing all of the elements in this collection in proper sequence (from first to last
     * element).
     *
     * <p>The returned array will be "safe" in that no references to it are maintained by this collection.  (In other
     * words, this method must allocate a new array even if this collection is backed by an array). The caller is thus
     * free to modify the returned array.
     *
     * @return an array containing all of the elements in this collection in proper sequence
     */
    Object[] toArray();

    /**
     * Returns an iterator over the elements in this collection in proper sequence.
     *
     * @return an iterator over the elements in this collection in proper sequence
     */
    Iterator<E> iterator();
}

