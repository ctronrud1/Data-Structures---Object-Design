package edu.ust.cisc;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class CiscPriorityQueue<E extends Comparable<E>> implements CiscCollection<E> {
    /**
     * Default initial capacity of elementData.
     */
    public static final int DEFAULT_CAPACITY = 10;
    /**
     * The array into which the elements of the CiscPriorityQueue are stored.
     */
    private E[] elementData;
    /**
     * The comparator to use when comparing elements.
     */
    private Comparator<E> comparator;
    /**
     * The size of the CiscPriorityQueue (the number of elements it contains).
     */
    private int size;

    /**
     * Constructs an empty priority queue with an initial capacity of DEFAULT_CAPACITY and no comparator.
     */
    public CiscPriorityQueue() {
        this(DEFAULT_CAPACITY, null);
    }

    /**
     * Constructs an empty priority queue with the specified initial capacity and no comparator.
     *
     * @param initialCapacity the initial capacity of the priority queue (must be non-negative)
     * @throws IllegalArgumentException if the specified initial capacity is negative
     */
    public CiscPriorityQueue(int initialCapacity) {
        this(initialCapacity, null);
        // Checking if the specified initial capacity is non-negative
        if (initialCapacity < 0) {
            throw new IllegalArgumentException("Initial capacity must be non-negative");
        }

        // Delegating to the other constructor with the specified initial capacity and a null comparator
        // If the comparator is null, natural ordering will be used

    }


    /**
     * Constructs an empty priority queue with an initial capacity of DEFAULT_CAPACITY and the specified comparator.
     *
     * @param comparator the comparator to use when comparing elements
     */
    public CiscPriorityQueue(Comparator<E> comparator) {
        this(DEFAULT_CAPACITY, comparator);
    }

    /**
     * Constructs an empty priority queue with the specified initial capacity and comparator.
     *
     * @param initialCapacity the initial capacity of the priority queue
     * @param comparator      the comparator to use when comparing elements
     * @throws IllegalArgumentException if the specified initial capacity is negative
     */
    @SuppressWarnings("unchecked")
    public CiscPriorityQueue(int initialCapacity, Comparator<E> comparator) {
        if (initialCapacity < 0) {
            throw new IllegalArgumentException();
        }
        this.elementData = (E[]) new Comparable[initialCapacity];
        this.comparator = comparator;
        this.size = 0;
        /*comparing elements*/
    }

    /**
     * Constructs an empty priority queue using the provided array as the underlying data structure.
     * Video: https://codesmell.org/spock/lecture/978
     *
     * @param unsortedArray the array to use as the priority queue's underlying array
     */
    public CiscPriorityQueue(Comparable<E>[] unsortedArray) {
        this.elementData = (E[]) unsortedArray;
        this.comparator = null;
        this.size = 0;
        for (int i = 0; i <unsortedArray.length; i++) {
            if (unsortedArray[i] != null) {
                this.size ++;
            }
        }

    }

    /**
     * Sorts the given number of elements in the provided array in place according the to heap sort algorithm.  In other
     * words, the first "size" elements of the provided array will be sorted after this method finishes.
     * Video: https://codesmell.org/spock/lecture/979
     *
     * @param unsortedArray the array to sort
     * @param size          the number of elements to sort in the provided array
     * @param comparator    the comparator to use when comparing elements
     * @param <T>           the type of element contained in the array
     */

    public static <T extends Comparable<T>> void heapSort(Comparable<T>[] unsortedArray, int size, Comparator<T> comparator) {
        for (int i = size / 2 - 1; i >= 0; i--) {
            int root = i;
            while (2 * root + 1 < size) {
                int leftChild = 2 * root + 1;
                int rightChild = 2 * root + 2;
                int max = root;
                if (comparator == null) {
                    if (unsortedArray[leftChild].compareTo((T) unsortedArray[max]) > 0) {
                        max = leftChild;
                    }
                    if (rightChild < size && unsortedArray[rightChild].compareTo((T) unsortedArray[max]) > 0) {
                        max = rightChild;
                    }
                } else {
                    if (comparator.compare((T) unsortedArray[leftChild], (T) unsortedArray[max]) > 0) {
                        max = leftChild;
                    }
                    if (rightChild < size && comparator.compare((T) unsortedArray[rightChild], (T) unsortedArray[max]) > 0) {
                        max = rightChild;
                    }
                }
                if (max != root) {
                    Comparable<T> temp = unsortedArray[root];
                    unsortedArray[root] = unsortedArray[max];
                    unsortedArray[max] = temp;
                    root = max;
                } else {
                    break;
                }
            }
        }
        for (int i = size - 1; i > 0; i--) {
            Comparable<T> temp = unsortedArray[0];
            unsortedArray[0] = unsortedArray[i];
            unsortedArray[i] = temp;
            int root = 0;
            while (true) {
                int max = root;
                int leftChild = 2 * root + 1;
                int rightChild = 2 * root + 2;
                if (leftChild < i && unsortedArray[leftChild].compareTo((T) unsortedArray[max]) > 0) {
                    max = leftChild;
                }
                if (rightChild < i && unsortedArray[rightChild].compareTo((T) unsortedArray[max]) > 0) {
                    max = rightChild;
                }
                if (max != root) {
                    temp = unsortedArray[root];
                    unsortedArray[root] = unsortedArray[max];
                    unsortedArray[max] = temp;
                    root = max;
                } else {
                    break;
                }
            }
        }
    }


    /**
     * Constructs an empty priority queue using the provided array as the underlying data structure and the specified
     * comparator.
     * Video: https://codesmell.org/spock/lecture/978
     *
     * @param unsortedArray the array to use as the priority queue's underlying array
     * @param comparator    the comparator to use when comparing elements
     */
    @SuppressWarnings("unchecked")
    public CiscPriorityQueue(Comparable<E>[] unsortedArray, Comparator<E> comparator) {
        this.elementData = (E[]) unsortedArray;
        this.comparator = comparator;
    }

    /**
     * Sorts the given number of elements in the provided array in place according the to heap sort algorithm.  In other
     * words, the first "size" elements of the provided array will be sorted after this method finishes.
     * Video: https://codesmell.org/spock/lecture/979
     *
     * @param unsortedArray the array to sort
     * @param size          the number of elements to sort in the provided array
     * @param <T>           the type of element contained in the array
     */
    public static <T extends Comparable<T>> void heapSort(Comparable<T>[] unsortedArray, int size) {
        heapSort(unsortedArray, size, null);
    }

    /**
     * Generates and returns a CiscPriorityQueue instance using the provided array as the underlying data structure for
     * the priority queue's max heap, along with the specified size and comparator.  In other words, the elements in the
     * provided array (along with the provided size and comparator) will constitute a valid max heap after this method
     * finishes.
     * Video: https://codesmell.org/spock/lecture/977
     *
     * @param unsortedArray the array to sort, to be used as the priority queue's underlying data structure
     * @param size the number of elements to sort in the provided array
     * @param comparator the comparator to use when comparing elements
     * @return a priority queue using the provided array as its underlying data structure implemented as a max heap
     * @param <T> the type of element contained in the priority queue and the provided array
     */
    private static <T extends Comparable<T>> CiscPriorityQueue<T> buildInPlaceHeap(Comparable<T>[] unsortedArray, int size, Comparator<T> comparator) {
        CiscPriorityQueue<T> priorityQueue = (comparator != null) ? new CiscPriorityQueue<>(unsortedArray, comparator) : new CiscPriorityQueue<>(unsortedArray);
        priorityQueue.size = size;
        for (int i = 0; i < size; i++) {
            priorityQueue.elementData[i] = (T) unsortedArray[i];
            int j = i;
            while (j > 0 && priorityQueue.compare(priorityQueue.elementData[j], priorityQueue.elementData[priorityQueue.parent(j)]) > 0) {
                T temp = priorityQueue.elementData[j];
                priorityQueue.elementData[j] = priorityQueue.elementData[priorityQueue.parent(j)];
                priorityQueue.elementData[priorityQueue.parent(j)] = temp;
                j = priorityQueue.parent(j);
            }
        }
        return priorityQueue;
    }


    /**
     * Sorts the elements in the provided priority queue's underlying array using repeated removals from the max heap.
     * Video: https://codesmell.org/spock/lecture/981
     *
     * @param pq A valid priority queue implemented as a max heap, whose underlying array will be sorted after this
     *           method finishes
     * @param <T> the type of element contained in the priority queue (as well as its underlying array)
     */
    private static <T extends Comparable<T>> void sortInPlaceHeap(CiscPriorityQueue<T> pq) {
        int size = pq.size;
        for (int i = size - 1; i > 0; i--) {
            pq.swap(pq.elementData, 0, i);
            int largest = 0;
            while (true) {
                int left = 2 * largest + 1;
                int right = 2 * largest + 2;
                int maxChild = left;
                if (right < i && pq.compare(pq.elementData[right], pq.elementData[left]) > 0) {
                    maxChild = right;
                }
                if (maxChild < i && pq.compare(pq.elementData[maxChild], pq.elementData[largest]) > 0) {
                    pq.swap(pq.elementData, largest, maxChild);
                    largest = maxChild;
                } else {
                    break;
                }
            }
        }
    }

    /**
     * Performs the bubble up operation for a max heap until the max heap property is restored.  Assumes the element to
     * bubble up is located at index "size".
     * Video: https://codesmell.org/spock/lecture/976
     */
    private void bubbleUpMaxHeap() {
        int index = size;

        while (index > 0 && compare(elementData[index], elementData[parent(index)]) > 0) {
            swap(elementData, index, parent(index));
            index = parent(index);
        }

    }

    /**
     * Returns and removes the element at the top of the max heap. The element at the bottom right-most leaf should
     * be moved to the top of the heap and bubbled down until the max-heap property is restored.
     * Video: https://codesmell.org/spock/lecture/980
     *
     * @return the element at the top of the max heap
     * @throws NoSuchElementException if the priority queue is empty
     */
    private E removeMaxHeap() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }
        E result = elementData[0];
        elementData[0] = elementData[size - 1];
        elementData[size - 1] = null;
        size--;

        int index = 0;
        while (true) {
            int left = 2 * index + 1;
            int right = 2 * index + 2;
            int maxChild = left;

            if (right < size && compare(elementData[right], elementData[left]) > 0) {
                maxChild = right;
            }
            if (maxChild < size && compare(elementData[maxChild], elementData[index]) > 0) {
                swap(elementData, index, maxChild);
                index = maxChild;
            } else {
                break;
            }
        }
        return result;
    }

    /**
     * Adds the specified element to this priority queue's min heap.  Elements are added as the bottom right-most leaf
     * node and bubbled up until the min-heap property is restored.
     *
     * <p>Collections may place the specified element at arbitrary locations if desired.  Collection classes should
     * clearly specify in their documentation how elements will be added to the collection.
     *
     * @param value element to be added to this min heap
     * @return {@code true}
     * @throws NullPointerException if the specified element is null
     */
    public boolean add(E value) {
        if(value == null) {
            throw new NullPointerException();
        }
        // resize if necessary
        ensureCapacity(size+1);
        // insert as new rightmost leaf
        elementData[size] = value;
        //bubble up
        int index = size;
        boolean found = false;   // have we found the proper place yet?
        while (!found && hasParent(index)) {
            int parent = parent(index);
            if (compare(elementData[index], elementData[parent]) < 0) {
                swap(elementData, index, parent(index));
                index = parent(index);
            } else {
                found = true;  // found proper location; stop the loop
            }
        }
        size++;
        return true;
    }

    /**
     * Removes the first occurrence of the specified element from this collection, if it is present.  If this collection
     * does not contain the element, it is unchanged. Returns {@code true} if this collection contained the specified
     * element (optional operation).
     *
     * @param o element to be removed from this collection, if present
     * @return {@code true} if this collection contained the specified element
     * @throws NullPointerException          if the specified element is null
     * @throws UnsupportedOperationException if the {@code remove} operation is not supported by this collection
     */
    @Override
    public boolean remove(Object o) {
        if (o == null) {
            throw new NullPointerException();
        }
        throw new UnsupportedOperationException();
    }

    /**
     * Adds all elements in the specified collection to this priority queue, in the order that they are returned by the
     * specified collection's iterator (optional operation).
     *
     * @param c collection containing elements to be added to this collection
     * @return {@code true} if this collection changed as a result of the call
     * @throws UnsupportedOperationException if the {@code addAll} operation is not supported by this collection
     * @throws NullPointerException          if the specified collection is null
     */
    @Override
    public boolean addAll(CiscCollection<? extends E> c) {
        if(c == null) {
            throw new NullPointerException();
        }
        int oldSize = size;
        ensureCapacity(size+c.size());
        for(E element: c) {
            add(element);
        }
        return size > oldSize;
    }

    /**
     * Returns {@code true} if this collection contains no elements.
     *
     * @return {@code true} if this collection contains no elements
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns the element at the top of the min heap.
     *
     * @return the element at the top of the min heap
     * @throws NoSuchElementException if the priority queue is empty
     */
    public E peek() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }
        return elementData[0];
    }

    /**
     * Returns and removes the element at the top of the min heap. The element at the bottom right-most leaf should
     * be moved to the top of the heap and bubbled down until the min-heap property is restored.
     *
     * @return the element at the top of the min heap
     * @throws NoSuchElementException if the priority queue is empty
     */
    public E remove() {
        E result = peek();

        // move rightmost leaf to become new root
        elementData[0] = elementData[size-1];
        elementData[size-1] = null;
        size--;

        // "bubble down" root as necessary to fix ordering
        int index = 0;
        boolean found = false;   // have we found the proper place yet?
        while (!found && hasLeftChild(index)) {
            int left = leftChild(index);
            int right = rightChild(index);
            int child = left;
            if (hasRightChild(index) && compare(elementData[right], (elementData[left])) < 0) {
                child = right;
            }

            if (compare(elementData[index], elementData[child]) > 0) {
                swap(elementData, index, child);
                index = child;
            } else {
                found = true;  // found proper location; stop the loop
            }
        }
        return result;
    }

    /**
     * Returns the number of elements in this collection.
     *
     * @return the number of elements in this collection
     */
    public int size() {
        return size;
    }

    /**
     * Removes all of the elements from this collection. The collection will be empty after this call returns.
     */
	public void clear() {
        for(int i=0; i<size; i++) {
            elementData[i] = null;
        }
        size = 0;
    }

    /**
     * Returns {@code true} if this collection contains the specified element (compared using the {@code equals}
     * method).  Your implementation should stop searching down a branch as soon as it is able to do so.  You may wish
     * to implement a recursive helper method returns a boolean indicating whether the specified element was found in
     * either the left branch or the right branch.
     *
     * @param value element whose presence in this collection is to be tested
     * @return {@code true} if this collection contains the specified element
     * @throws NullPointerException if the specified element is null
     */
    public boolean contains(Object value) {
        if(value == null) {
            throw new NullPointerException();
        }
        return contains(value, 0);
    }

    @SuppressWarnings("unchecked")
	private boolean contains(Object value, int index) {
        if(index >= size || compare(elementData[index], (E)value) > 0) {
            return false;
        } else if(compare(elementData[index], (E)value) == 0) {
            return true;
        } else {
            return contains(value, leftChild(index)) || contains(value, rightChild(index));
        }
    }

    /**
     * Returns an array containing all of the elements in this collection in proper sequence (level by level from top to
     * bottom, left to right for each level).
     *
     * <p>The returned array will be "safe" in that no references to it are maintained by this collection.  (In other
     * words, this method must allocate a new array even if this collection is backed by an array). The caller is thus
     * free to modify the returned array.
     *
     * @return an array containing all of the elements in this collection in proper sequence
     */
    public Object[] toArray() {
        return Arrays.copyOfRange(elementData, 0, size);
    }

    /**
     * Returns an iterator over the elements in this collection in proper sequence (level by level from top to bottom,
     * left to right for each level).
     *
     * @return an iterator over the elements in this collection in proper sequence
     */
    public Iterator<E> iterator() {
        return new CiscPriorityQueueIterator();
    }

    /**
     * Returns a string representation of this collection.  This string should consist of a comma separated list of
     * values contained in this collection (level by level from top to bottom, left to right for each level), surrounded
     * by square brackets (examples: [3, 6, 7] and []).
     *
     * @return a string representation of this collection
     */
    public String toString() {
        String result = "[";
        if (!isEmpty()) {
            result += elementData[0];
            for (int i = 1; i < size; i++) {
                result += ", " + elementData[i];
            }
        }
        return result + "]";
    }

    /**
     * Ensures that the capacity of the underlying array is at least {@code minCapacity}. If not, the underlying array
     * will be replaced with a new array whose capacity is either {@code minCapacity} or double the current capacity + 1
     * (whichever is larger).
     *
     * @param minCapacity minimum capacity of the underlying array
     */
    @SuppressWarnings("unchecked")
    private void ensureCapacity(int minCapacity) {
        if(minCapacity > elementData.length) {
            int newCapacity = elementData.length * 2 + 1;
            if(newCapacity < minCapacity) {
                newCapacity = minCapacity;
            }
            E[] newElementData = (E[]) new Comparable[newCapacity];
            System.arraycopy(elementData, 0, newElementData, 0, size);
            elementData = newElementData;
        }
    }

    /**
     * Compares two objects using the priority queue's comparator (if present), otherwise using the element's compareTo
     * method.
     *
     * @param item1 the first argument to pass to the comparator's compare method (if present), otherwise the calling
     *              object for the compareTo call
     * @param item2 the second argument to pass to the comparator's compare method (if present), otherwise the argument
     *              for the compareTo call
     * @return a negative int if item1 < item2, a positive int if item1 > item2, or 0 if item1 is equal to item2
     */
    private int compare(E item1, E item2) {
        if(comparator == null) {
            return item1.compareTo(item2);
        } else {
            return comparator.compare(item1, item2);
        }
    }

    // helpers for navigating indexes up/down the tree
    private int parent(int index) {
        return (index-1) / 2;
    }

    // returns index of left child of given index
    private int leftChild(int index) {
        return index * 2 + 1;
    }

    // returns index of right child of given index
    private int rightChild(int index) {
        return index * 2 + 2;
    }

    // returns true if the node at the given index has a parent (is not the root)
    private boolean hasParent(int index) {
        return index > 0;
    }

    // returns true if the node at the given index has a non-empty left child
    private boolean hasLeftChild(int index) {
        return leftChild(index) < size;
    }

    // returns true if the node at the given index has a non-empty right child
    private boolean hasRightChild(int index) {
        return rightChild(index) < size;
    }

    // switches the values at the two given indexes of the given array
    private void swap(E[] a, int index1, int index2) {
        E temp = a[index1];
        a[index1] = a[index2];
        a[index2] = temp;
    }

    private class CiscPriorityQueueIterator implements Iterator<E> {
        /**
         * Stores the index of the next element to return.
         */
    	private int nextIndex;

        /**
         * Returns {@code true} if the iteration has more elements. (In other words, returns {@code true} if
         * {@link #next} would return an element rather than throwing an exception.)
         *
         * @return {@code true} if the iteration has more elements
         */
		@Override
		public boolean hasNext() {
			return nextIndex <size;
		}

        /**
         * Returns the next element in the iteration.
         *
         * @return the next element in the iteration
         * @throws NoSuchElementException if the iteration has no more elements
         */
		@Override
		public E next() {
            if(!hasNext()) {
                throw new NoSuchElementException();
            }
            return elementData[nextIndex++];
		}
    }
}

